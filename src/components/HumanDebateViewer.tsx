import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/components/ui/use-toast';
import { 
  ArrowLeft, 
  Calendar, 
  MessageSquare, 
  User, 
  Users,
  Clock,
  Download,
  Share2,
  Copy,
  MapPin,
  Award,
  Target,
  Eye
} from 'lucide-react';

interface HumanDebateMessage {
  id: string;
  roomId?: string;
  sender?: string;
  senderId?: string;
  senderName: string;
  message?: string;
  text?: string;
  side: 'FOR' | 'AGAINST' | 'OBSERVER' | 'EVALUATOR';
  timestamp: number | string;
}

interface HumanDebateUser {
  id: string;
  name: string;
  side: 'FOR' | 'AGAINST' | 'OBSERVER' | 'EVALUATOR' | null;
  isActive: boolean;
  lastSeen: number;
}

interface HumanDebateRecord {
  id: string;
  roomId: string;
  topic: string;
  createdBy: string;
  createdAt: number;
  endedAt?: number;
  status: 'waiting' | 'active' | 'completed';
  participants: HumanDebateUser[];
  messages: HumanDebateMessage[];
  hostName: string;
  roomType: 'public' | 'private';
  maxParticipants?: number;
  tags?: string[];
  winner?: 'FOR' | 'AGAINST' | 'DRAW';
  moderatorNotes?: string;
}

interface HumanDebateViewerProps {
  debate: HumanDebateRecord;
  onBack: () => void;
}

const HumanDebateViewer = ({ debate, onBack }: HumanDebateViewerProps) => {
  const [showDetails, setShowDetails] = useState(false);
  const { toast } = useToast();

  const formatTime = (timestamp: number) => {
    return new Intl.DateTimeFormat('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(new Date(timestamp));
  };

  const formatDate = (timestamp: number) => {
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(new Date(timestamp));
  };

  const formatDuration = (start: number, end?: number) => {
    if (!end) return 'N/A';
    const duration = Math.round((end - start) / 60000); // Convert to minutes
    if (duration < 60) {
      return `${duration} minutes`;
    } else {
      const hours = Math.floor(duration / 60);
      const minutes = duration % 60;
      return `${hours}h ${minutes}m`;
    }
  };

  const getRoleBadge = (side: string | null) => {
    switch (side) {
      case 'FOR':
        return { text: 'In Favor', color: 'bg-green-100 text-green-800' };
      case 'AGAINST':
        return { text: 'Against', color: 'bg-red-100 text-red-800' };
      case 'OBSERVER':
        return { text: 'Observer', color: 'bg-blue-100 text-blue-800' };
      case 'EVALUATOR':
        return { text: 'Evaluator', color: 'bg-purple-100 text-purple-800' };
      default:
        return { text: 'Unassigned', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return { text: 'Completed', color: 'bg-green-100 text-green-800' };
      case 'active':
        return { text: 'Active', color: 'bg-blue-100 text-blue-800' };
      case 'waiting':
        return { text: 'Waiting', color: 'bg-yellow-100 text-yellow-800' };
      default:
        return { text: 'Unknown', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const exportDebate = () => {
    const transcript = debate.messages.map(msg => {
      // Handle both timestamp formats
      const msgTime = typeof msg.timestamp === 'number' 
        ? msg.timestamp 
        : new Date(msg.timestamp).getTime();
      const msgText = msg.message || msg.text || 'No content';
      return `[${formatTime(msgTime)}] ${msg.senderName} (${msg.side}): ${msgText}`;
    }).join('\n\n');

    const participantsList = debate.participants.map(p => 
      `- ${p.name} (${p.side || 'Unassigned'})`
    ).join('\n');

    const content = `HUMAN DEBATE TRANSCRIPT
================================

Topic: ${debate.topic}
Room ID: ${debate.roomId}
Host: ${debate.hostName}
Date: ${formatDate(debate.createdAt)}
Duration: ${formatDuration(debate.createdAt, debate.endedAt)}
Status: ${debate.status}

Participants:
${participantsList}

Total Messages: ${debate.messages.length}

CONVERSATION:
================================

${transcript}

Generated by DebateWorld AI - Human Debate Platform
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `human-debate-${debate.roomId}-${new Date(debate.createdAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareDebate = async () => {
    const text = `Just reviewed a debate on "${debate.topic}" with ${debate.participants.length} participants! 🗣️ Duration: ${formatDuration(debate.createdAt, debate.endedAt)}`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Human Debate Session',
          text: text,
        });
      } catch (error) {
        await navigator.clipboard.writeText(text);
        toast({
          title: "Shared!",
          description: "Debate summary copied to clipboard!",
        });
      }
    } else {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Shared!",
        description: "Debate summary copied to clipboard!",
      });
    }
  };

  const copyRoomId = () => {
    navigator.clipboard.writeText(debate.roomId);
    toast({
      title: "Copied!",
      description: "Room ID copied to clipboard",
    });
  };

  const statusBadge = getStatusBadge(debate.status);
  const forSideParticipants = debate.participants.filter(p => p.side === 'FOR');
  const againstSideParticipants = debate.participants.filter(p => p.side === 'AGAINST');
  const observerParticipants = debate.participants.filter(p => p.side === 'OBSERVER');
  const evaluatorParticipants = debate.participants.filter(p => p.side === 'EVALUATOR');

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Human Debate Viewer</h1>
          <p className="text-gray-600 mt-2">{formatDate(debate.createdAt)}</p>
        </div>
        <div className="flex items-center space-x-3">
          <Button variant="outline" onClick={exportDebate}>
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button variant="outline" onClick={shareDebate}>
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
          <Button variant="outline" onClick={onBack}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>
        </div>
      </div>

      {/* Debate Info */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>{debate.topic}</span>
            <div className="flex items-center space-x-2">
              <Badge className={statusBadge.color}>
                {statusBadge.text}
              </Badge>
              {debate.tags?.map(tag => (
                <Badge key={tag} variant="outline">
                  {tag}
                </Badge>
              ))}
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <User className="h-5 w-5 text-blue-600" />
                <span className="font-medium">Host:</span>
                <span>{debate.hostName}</span>
              </div>
              <div className="flex items-center space-x-2">
                <MapPin className="h-5 w-5 text-green-600" />
                <span className="font-medium">Room ID:</span>
                <span className="font-mono bg-gray-100 px-2 py-1 rounded">{debate.roomId}</span>
                <Button variant="ghost" size="sm" onClick={copyRoomId}>
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex items-center space-x-2">
                <Users className="h-5 w-5 text-purple-600" />
                <span className="font-medium">Participants:</span>
                <span>{debate.participants.length}</span>
              </div>
            </div>
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <MessageSquare className="h-5 w-5 text-green-600" />
                <span className="font-medium">Total Messages:</span>
                <span>{debate.messages.length}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-purple-600" />
                <span className="font-medium">Date:</span>
                <span>{formatDate(debate.createdAt)}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Clock className="h-5 w-5 text-orange-600" />
                <span className="font-medium">Duration:</span>
                <span>{formatDuration(debate.createdAt, debate.endedAt)}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Participants Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Users className="h-6 w-6 text-blue-600" />
            <span>Participants & Roles</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* For Side */}
            {forSideParticipants.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-semibold text-green-700 flex items-center">
                  <Target className="h-4 w-4 mr-1" />
                  In Favor ({forSideParticipants.length})
                </h4>
                {forSideParticipants.map(participant => (
                  <div key={participant.id} className="text-sm p-2 bg-green-50 rounded">
                    {participant.name}
                  </div>
                ))}
              </div>
            )}

            {/* Against Side */}
            {againstSideParticipants.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-semibold text-red-700 flex items-center">
                  <Target className="h-4 w-4 mr-1" />
                  Against ({againstSideParticipants.length})
                </h4>
                {againstSideParticipants.map(participant => (
                  <div key={participant.id} className="text-sm p-2 bg-red-50 rounded">
                    {participant.name}
                  </div>
                ))}
              </div>
            )}

            {/* Observers */}
            {observerParticipants.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-semibold text-blue-700 flex items-center">
                  <Eye className="h-4 w-4 mr-1" />
                  Observers ({observerParticipants.length})
                </h4>
                {observerParticipants.map(participant => (
                  <div key={participant.id} className="text-sm p-2 bg-blue-50 rounded">
                    {participant.name}
                  </div>
                ))}
              </div>
            )}

            {/* Evaluators */}
            {evaluatorParticipants.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-semibold text-purple-700 flex items-center">
                  <Award className="h-4 w-4 mr-1" />
                  Evaluators ({evaluatorParticipants.length})
                </h4>
                {evaluatorParticipants.map(participant => (
                  <div key={participant.id} className="text-sm p-2 bg-purple-50 rounded">
                    {participant.name}
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Debate Statistics */}
      <Card>
        <CardHeader>
          <CardTitle>Debate Statistics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="p-4 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">
                {debate.messages.filter(m => m.side === 'FOR').length}
              </div>
              <div className="text-sm text-gray-600">Messages For</div>
            </div>
            <div className="p-4 bg-red-50 rounded-lg">
              <div className="text-2xl font-bold text-red-600">
                {debate.messages.filter(m => m.side === 'AGAINST').length}
              </div>
              <div className="text-sm text-gray-600">Messages Against</div>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">
                {debate.messages.filter(m => m.side === 'OBSERVER').length}
              </div>
              <div className="text-sm text-gray-600">Observer Comments</div>
            </div>
            <div className="p-4 bg-purple-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">
                {debate.messages.filter(m => m.side === 'EVALUATOR').length}
              </div>
              <div className="text-sm text-gray-600">Evaluator Notes</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Debate Transcript */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <MessageSquare className="h-6 w-6 text-blue-600" />
            <span>Debate Transcript</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-96 w-full rounded-md border p-4">
            <div className="space-y-4">
              {debate.messages && debate.messages.length > 0 ? (
                debate.messages.map((message, index) => {
                  const roleBadge = getRoleBadge(message.side);
                  // Handle both timestamp formats (number and string)
                  const messageTime = typeof message.timestamp === 'number' 
                    ? message.timestamp 
                    : new Date(message.timestamp).getTime();
                  
                  return (
                    <div key={message.id || index} className="border-l-4 border-l-gray-200 pl-4">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className="font-semibold text-sm">{message.senderName}</span>
                        <Badge className={`text-xs ${roleBadge.color}`}>
                          {roleBadge.text}
                        </Badge>
                        <span className="text-xs text-gray-500">{formatTime(messageTime)}</span>
                      </div>
                      <div className="text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
                        {/* Handle both message formats */}
                        {message.message || message.text || 'No message content'}
                      </div>
                    </div>
                  );
                })
              ) : (
                <div className="text-center py-8">
                  <MessageSquare className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">No messages found in this debate</p>
                  <p className="text-sm text-gray-400 mt-2">
                    This could be due to a data storage issue or the debate had no messages
                  </p>
                </div>
              )}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>

      {/* Export Info */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Download className="h-5 w-5 text-blue-600" />
              <span className="font-medium text-blue-800">Export Options</span>
            </div>
            <div className="flex space-x-2">
              <Button variant="outline" size="sm" onClick={exportDebate}>
                Download Transcript
              </Button>
              <Button variant="outline" size="sm" onClick={shareDebate}>
                Share Summary
              </Button>
            </div>
          </div>
          <p className="text-sm text-blue-700 mt-2">
            Export the full conversation transcript or share a summary of this debate session.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default HumanDebateViewer;
